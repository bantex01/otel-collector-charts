# This is a sample OpenTelemetry Collector builder configuration file
# meant to be used by ServiceNow Cloud Observability customers in
# setting up gateway-mode telemetry collectors and sending to our SaaS
# using the new OTel-Arrow protocol.
#
# This configuration file describes the components that will be built
# into a custom OpenTelemetry collector.  For an overview of this
# process, see:
#
#   https://opentelemetry.io/docs/collector/custom-collector/
#
# Note: This is a relatively advanced operation, as it requires installing a Golang
# toolchain to execute and build the collector this way. When you have this file
# configured to your liking,
#
#   go install go.opentelemetry.io/collector/cmd/builder@latest
#   builder --config build-config.yaml
#
# the built collector artifact is placed in the `./dist` directory.
dist:
  # See https://github.com/open-telemetry/opentelemetry-collector/blob/main/cmd/builder/README.md
  # for more detail on these options.
  #
  # This is the name of the `go.mod` module file generated by the
  # builder, which may be visible in a CI/CD pipeline, for example.
  module: github.com/myorg/telemetrygateway/dist
  # The collector name shows in startup logs, for example, and other
  # internal telemetry (optional).
  name: myorgtelemetrygateway
  # The version of the collector (optional).
  version: 0.1.0
  # This indicates which version of the core collector components as
  # well as the builder version.  At the time of this writing, we
  # recommend using at least the current release.
  otelcol_version: 0.91.0

# We recommend building in both the OTLP exporter and the OTel-Arrow
# exporter.
exporters:
  # We have submitted the OTel-Arrow exporter to be included in the
  # OpenTelemetry Collector-Contrib release, so that its functionality
  # becomes available in the public contrib collector build.  Until the
  # submission is finished, the component can be imported directly from
  # the otel-arrow repository.
  #
  # Use this exporter stanza:
  - gomod: github.com/open-telemetry/otel-arrow/collector v0.13.0
    import: github.com/open-telemetry/otel-arrow/collector/exporter/otelarrowexporter
  # Note that while OTel-Arrow supports traces, metrics, and logs.
  # ServiceNow's initial release is limited to OTel-Arrow traces
  # support.  Contact your ServiceNow representative to discuss our
  # deployment of OTel-Arrow for logs and metrics.
    
  # As an alternate to the OTel-Arrow exporter (e.g., in case
  # malfunction or performance issue), we recommend building with the
  # core OTLP exporter as a fallback.  The OTel-Arrow component is
  # derived from the OTLP component, so it supports compatible
  # configuration.  Generally, remove the `arrow` subection of the
  # `otelarrow` exporter configuration and it will apply to the OTLP
  # exporter.
  - gomod: go.opentelemetry.io/collector/exporter/otlpexporter v0.91.0

  # In case you want to record an OTLP telemetry session to a JSON
  # file, we recommend this additional utility.  See also the
  # obfuscation processor, listed below.  The OTel-Arrow provides
  # offline tools that can help explain poor compression performance
  # using inputs generated by this exporter, for example.
  - gomod: github.com/open-telemetry/otel-arrow/collector v0.13.0
    import: github.com/open-telemetry/otel-arrow/collector/exporter/fileexporter

receivers:
  # The OTel-Arrow receiver supports multiple protocols including OTel-Arrow, OTLP gRPC,
  # OTLP HTTP/proto, and OTLP HTTP/json.  We recommend using this component to receive
  # OTLP (all forms) and OTel-Arrow in a single component.
  # 
  # This enables other OTel Collectors or experimental SDKs that support OTel-Arrow to
  # send to this collector, such as this one for the OTel-Go Trace SDK:
  # https://github.com/lightstep/otel-launcher-go/tree/main/lightstep/sdk/trace/exporters/otlp/otelcol
  - gomod: github.com/open-telemetry/otel-arrow/collector v0.13.0
    import: github.com/open-telemetry/otel-arrow/collector/receiver/otelarrowreceiver
  # As an alternate to the OTel-Arrow receiver (e.g., in case malfunction or performance
  # issue), we recommend building with the core OTLP receiver as a fallback.  The
  # OTel-Arrow component is derived from the OTLP component, so it supports compatible
  # configuration.  Generally, remove the `arrow` subection of the `otelarrow` receiver
  # configuration and it will apply to the OTLP exporter.
  - gomod: go.opentelemetry.io/collector/receiver/otlpreceiver v0.91.0

  # You may wish to enable other receivers from the Collector-Contrib repository or
  # elsewhere.  Here are some that might be useful:
  #
  # - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/prometheusreceiver v0.91.0
  # - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver v0.91.0
  # - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kubeletstatsreceiver v0.91.0
  # - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver v0.91.0

processors:
  # We recommend use of the batch processor.
  - gomod: go.opentelemetry.io/collector/processor/batchprocessor v0.91.0

  # We recommend building with the follow processor for obfuscation, in case you want to
  # record telemetry sessions for offline analysis.
  - gomod: github.com/open-telemetry/otel-arrow/collector v0.13.0
    import: github.com/open-telemetry/otel-arrow/collector/processor/obfuscationprocessor
    
  # We emphatically DO NOT recommend use of the memory limiter processor, i.e., do not
  # build with go.opentelemetry.io/collector/processor/memorylimiter.

  # These Collector-Contrib components are referred to in the charts in this package.
  - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/processor/resourcedetectionprocessor v0.91.0
  - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/processor/k8sattributesprocessor v0.91.0
  - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/processor/resourceprocessor v0.91.0
  - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/processor/metricstransformprocessor v0.91.0

  # ServiceNow does not at this time recommend the probabilistic sampler processor,
  # because it leads to undercounting of spans.  We will update this recommendation
  # when the sampler is fully supported.
  # - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/processor/probabilisticsamplerprocessor v0.91.0
    
  # TODO: Note: We will recommend use of a new uncompressed-size processor
  # when it is ready.

  # You may be interested in other transform components in the
  # Collector-Contrib repository.  Here are some that might be useful:
  #
  # - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/processor/attributesprocessor v0.91.0

extensions:
  # You may be interested in externsions from the Collector-Contrib repository.  None are
  # required.  Here are some that might be useful:
  - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/extension/healthcheckextension v0.91.0
  - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/extension/pprofextension v0.91.0

  # We do not support use of headersetterextension to apply the lightstep-access-token
  # header on a per-request basis.  Contact ServiceNow if you are interested in
  # multi-tenancy with OTel-Arrow.  Do not build with
  # github.com/open-telemetry/opentelemetry-collector-contrib/extension/headerssetterextension
    
# If you are building this collector in an Golang monorepo, or to apply security patches
# and other overrides to the go.mod file, use this section.
replaces:
  # For example:
  # - github.com/at-risk/code/module => github.com/at-risk/code/module v2.2.2
